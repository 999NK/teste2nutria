import { useState, useRef, useEffect } from "react";
import { useMutation } from "@tanstack/react-query";
import { useAuth } from "@/hooks/useAuth";

import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Textarea } from "@/components/ui/textarea";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from "@/lib/queryClient";
import { isUnauthorizedError } from "@/lib/authUtils";
import { 
  Brain, 
  Send, 
  MessageSquare, 
  Lightbulb,
  Sparkles,
  Bell
} from "lucide-react";

interface Message {
  id: string;
  content: string;
  role: 'user' | 'assistant';
  timestamp: Date;
}

export default function AiChat() {
  const { user, isAuthenticated, isLoading } = useAuth();
  const { toast } = useToast();
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      content: `Ol√°! Sou seu assistente nutricional com IA. Posso ajudar voc√™ com d√∫vidas sobre alimenta√ß√£o, sugest√µes de substitui√ß√µes, an√°lise de refei√ß√µes e muito mais.

üí° **Dicas √∫teis:**
‚Ä¢ Como posso melhorar minha alimenta√ß√£o? - Foque em alimentos naturais, mantenha hor√°rios regulares e hidrate-se bem
‚Ä¢ Quantas refei√ß√µes por dia? - Recomendo 5-6 refei√ß√µes pequenas: caf√© da manh√£, lanche, almo√ßo, lanche da tarde, jantar e ceia
‚Ä¢ Como controlar compuls√£o alimentar? - Mantenha hor√°rios regulares, pratique mindfulness e identifique gatilhos emocionais

Como posso ajudar hoje?`,
      role: 'assistant',
      timestamp: new Date(),
    }
  ]);
  const [inputMessage, setInputMessage] = useState('');
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  // Redirect if not authenticated
  useEffect(() => {
    if (!isLoading && !isAuthenticated) {
      toast({
        title: "Unauthorized",
        description: "You are logged out. Logging in again...",
        variant: "destructive",
      });
      setTimeout(() => {
        window.location.href = "/api/login";
      }, 500);
      return;
    }
  }, [isAuthenticated, isLoading, toast]);

  const sendMessageMutation = useMutation({
    mutationFn: async (message: string) => {
      return apiRequest("/api/ai/chat", {
        method: "POST",
        body: JSON.stringify({ message }),
      });
    },
    onSuccess: (data) => {
      // Split long responses into multiple messages
      const response = data.response;
      const maxLength = 300; // Maximum characters per message
      
      if (response.length <= maxLength) {
        const assistantMessage: Message = {
          id: Date.now().toString(),
          content: response,
          role: 'assistant',
          timestamp: new Date(),
        };
        setMessages(prev => [...prev, assistantMessage]);
      } else {
        // Split by sentences, respecting maxLength
        const sentences = response.split(/[.!?]\s+/).filter(s => s.trim());
        let currentMessage = '';
        let messageCount = 0;
        
        sentences.forEach((sentence, index) => {
          const sentenceWithPunctuation = sentence + (index < sentences.length - 1 ? '.' : '');
          
          if (currentMessage.length + sentenceWithPunctuation.length + 1 > maxLength && currentMessage) {
            // Send current message
            setTimeout(() => {
              const assistantMessage: Message = {
                id: `${Date.now()}-${messageCount}`,
                content: currentMessage.trim(),
                role: 'assistant',
                timestamp: new Date(),
              };
              setMessages(prev => [...prev, assistantMessage]);
            }, messageCount * 1500); // Delay each message by 1.5 seconds
            
            messageCount++;
            currentMessage = sentenceWithPunctuation;
          } else {
            currentMessage += (currentMessage ? ' ' : '') + sentenceWithPunctuation;
          }
          
          // Send last message
          if (index === sentences.length - 1 && currentMessage) {
            setTimeout(() => {
              const assistantMessage: Message = {
                id: `${Date.now()}-${messageCount}`,
                content: currentMessage.trim(),
                role: 'assistant',
                timestamp: new Date(),
              };
              setMessages(prev => [...prev, assistantMessage]);
            }, messageCount * 1500);
          }
        });
      }
    },
    onError: (error) => {
      if (isUnauthorizedError(error)) {
        toast({
          title: "Sess√£o expirada",
          description: "Fa√ßa login novamente para continuar.",
          variant: "destructive",
        });
        setTimeout(() => {
          window.location.href = "/api/login";
        }, 2000);
        return;
      }
      
      toast({
        title: "Erro na conversa",
        description: "N√£o foi poss√≠vel obter resposta da IA. Tente novamente.",
        variant: "destructive",
      });
    },
  });

  const handleSendMessage = () => {
    if (!inputMessage.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      content: inputMessage,
      role: 'user',
      timestamp: new Date(),
    };

    setMessages(prev => [...prev, userMessage]);
    sendMessageMutation.mutate(inputMessage);
    setInputMessage('');
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const suggestedQuestions = [
    "Quais alimentos s√£o ricos em prote√≠na?",
    "Como posso substituir o a√ß√∫car nas receitas?",
    "Qual a quantidade ideal de √°gua por dia?",
    "Quais s√£o os melhores lanches saud√°veis?",
  ];

  if (isLoading || !user) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <div className="w-16 h-16 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
          <p className="text-muted-foreground">Carregando...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900 flex flex-col pb-32 lg:pb-0">
      {/* Fixed Header - Mobile */}
      <div className="fixed top-0 left-0 right-0 bg-white dark:bg-gray-800 px-4 py-4 border-b z-40 lg:hidden">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <div className="w-8 h-8 bg-green-500 rounded-lg flex items-center justify-center">
              <span className="text-white font-bold text-sm">N</span>
            </div>
            <div>
              <h1 className="text-lg font-bold text-gray-900 dark:text-white">NutrIA</h1>
              <p className="text-xs text-gray-600 dark:text-gray-400">ter., 24 de junho</p>
            </div>
          </div>
          <Button variant="ghost" size="icon" className="w-8 h-8">
            <Bell className="w-4 h-4" />
          </Button>
        </div>
      </div>

      <main className="flex-1 overflow-hidden flex flex-col">
        {/* Desktop Header */}
        <header className="hidden lg:block bg-card border-b border-border px-6 py-4">
          <div className="flex items-center">
            <div className="flex items-center space-x-3">
              <div className="w-10 h-10 bg-primary rounded-full flex items-center justify-center">
                <Brain className="w-6 h-6 text-white" />
              </div>
              <div>
                <h2 className="text-2xl font-bold text-foreground">Assistente IA Nutricional</h2>
                <p className="text-muted-foreground">
                  Tire suas d√∫vidas sobre nutri√ß√£o e alimenta√ß√£o
                </p>
              </div>
            </div>
          </div>
        </header>

        <div className="flex-1 flex overflow-hidden lg:pt-0 pt-16">
          {/* Chat Area */}
          <div className="flex-1 flex flex-col">
            {/* Messages */}
            <div className="flex-1 overflow-y-auto p-4 lg:p-6 pb-20 lg:pb-6">
              {messages.map((message) => (
                <div
                  key={message.id}
                  className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'} mb-4`}
                >
                  <div className={`flex space-x-3 max-w-[85%] lg:max-w-2xl ${message.role === 'user' ? 'flex-row-reverse space-x-reverse' : ''}`}>
                    <Avatar className="w-8 h-8 flex-shrink-0">
                      <AvatarFallback className={message.role === 'assistant' ? 'bg-green-500 text-white' : 'bg-blue-500 text-white'}>
                        {message.role === 'assistant' ? <Brain className="w-4 h-4" /> : 'U'}
                      </AvatarFallback>
                    </Avatar>
                    <div
                      className={`rounded-2xl px-4 py-3 break-words ${
                        message.role === 'user'
                          ? 'bg-blue-500 text-white'
                          : 'bg-gray-100 dark:bg-gray-800 text-gray-900 dark:text-white'
                      }`}
                    >
                      <p className="text-sm whitespace-pre-wrap leading-relaxed">{message.content}</p>
                      <p className="text-xs opacity-70 mt-1">
                        {message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                      </p>
                    </div>
                  </div>
                </div>
              ))}
              {sendMessageMutation.isPending && (
                <div className="flex justify-start mb-4">
                  <div className="flex space-x-3 max-w-[85%] lg:max-w-2xl">
                    <Avatar className="w-8 h-8 flex-shrink-0">
                      <AvatarFallback className="bg-green-500 text-white">
                        <Brain className="w-4 h-4" />
                      </AvatarFallback>
                    </Avatar>
                    <div className="bg-gray-100 dark:bg-gray-800 rounded-2xl px-4 py-3">
                      <div className="flex space-x-1">
                        <div className="w-2 h-2 bg-gray-500 rounded-full animate-bounce"></div>
                        <div className="w-2 h-2 bg-gray-500 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                        <div className="w-2 h-2 bg-gray-500 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                      </div>
                    </div>
                  </div>
                </div>
              )}
              <div ref={messagesEndRef} />
            </div>

            {/* Input Area - Desktop Only */}
            <div className="hidden lg:block border-t border-gray-200 dark:border-gray-700 p-4 bg-white dark:bg-gray-800">
              <div className="flex space-x-3 items-end">
                <Textarea
                  value={inputMessage}
                  onChange={(e) => setInputMessage(e.target.value)}
                  onKeyPress={handleKeyPress}
                  placeholder="Digite sua pergunta sobre nutri√ß√£o..."
                  className="flex-1 min-h-[44px] max-h-32 resize-none border-gray-300 dark:border-gray-600 rounded-2xl px-4 py-3 text-sm focus:ring-2 focus:ring-green-500 focus:border-transparent"
                  disabled={sendMessageMutation.isPending}
                />
                <Button
                  onClick={handleSendMessage}
                  disabled={!inputMessage.trim() || sendMessageMutation.isPending}
                  size="icon"
                  className="h-11 w-11 rounded-full bg-green-500 hover:bg-green-600 disabled:opacity-50"
                >
                  <Send className="h-4 w-4" />
                </Button>
              </div>
            </div>
          </div>

          {/* Sidebar with suggestions - Desktop Only */}
          <div className="hidden lg:block w-80 border-l border-border p-4 space-y-4">
            <Card>
              <CardHeader>
                <CardTitle className="text-sm flex items-center">
                  <Lightbulb className="h-4 w-4 mr-2" />
                  Perguntas Sugeridas
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-2">
                {suggestedQuestions.map((question, index) => (
                  <Button
                    key={index}
                    variant="outline"
                    className="w-full text-left h-auto p-3 text-sm"
                    onClick={() => setInputMessage(question)}
                  >
                    {question}
                  </Button>
                ))}
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="text-sm flex items-center">
                  <Sparkles className="h-4 w-4 mr-2" />
                  Dicas do Assistente
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3 text-sm text-muted-foreground">
                  <div className="flex items-start space-x-2">
                    <div className="w-2 h-2 bg-primary rounded-full mt-2 flex-shrink-0"></div>
                    <p>Seja espec√≠fico em suas perguntas para respostas mais precisas</p>
                  </div>
                  <div className="flex items-start space-x-2">
                    <div className="w-2 h-2 bg-primary rounded-full mt-2 flex-shrink-0"></div>
                    <p>Posso ajudar com substitui√ß√µes alimentares e an√°lise nutricional</p>
                  </div>
                  <div className="flex items-start space-x-2">
                    <div className="w-2 h-2 bg-primary rounded-full mt-2 flex-shrink-0"></div>
                    <p>Para orienta√ß√µes m√©dicas espec√≠ficas, consulte sempre um profissional</p>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </main>
      
      {/* Fixed Input Area - Mobile Only */}
      <div className="lg:hidden fixed bottom-16 left-0 right-0 border-t border-gray-200 dark:border-gray-700 p-4 bg-white dark:bg-gray-800 z-50">
        <div className="flex space-x-3 items-center">
          <Textarea
            value={inputMessage}
            onChange={(e) => setInputMessage(e.target.value)}
            onKeyPress={handleKeyPress}
            placeholder="Digite sua pergunta sobre nutri√ß√£o..."
            className="flex-1 min-h-[44px] max-h-[44px] resize-none border-gray-300 dark:border-gray-600 rounded-2xl px-4 py-3 text-sm focus:ring-2 focus:ring-green-500 focus:border-transparent"
            disabled={sendMessageMutation.isPending}
          />
          <Button
            onClick={handleSendMessage}
            disabled={!inputMessage.trim() || sendMessageMutation.isPending}
            size="icon"
            className="h-11 w-11 rounded-full bg-green-500 hover:bg-green-600 disabled:opacity-50 flex-shrink-0"
          >
            <Send className="h-4 w-4" />
          </Button>
        </div>
      </div>
    </div>
  );
}
